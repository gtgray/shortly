apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.7"
}

android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }
}

project.afterEvaluate {

    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def excludes = [
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        'android/**/*.*',
                        'io/realm/**/*.*',
                        '**/*_MembersInjector.class',
                        '**/Dagger*Component.class',
                        '**/Dagger*Component$Builder.class',
                        '**/*Module_*Factory.class',
                        '**/*_Factory.class',
                        '**/*_ViewBinding*.class',
                        '**/*$$*.class',
                        '**/*MoxyReflector.class'
                ]

                getClassDirectories().from(fileTree(
                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: excludes
                ) + fileTree(
                        dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
                        excludes: excludes
                ))

                def coverageSourceDirs = [
                        android.sourceSets.main.java.srcDirs,
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java",
                        "src/main/kotlin",
                        "src/$productFlavorName/kotlin",
                        "src/$buildTypeName/kotlin"
                ]
                additionalSourceDirs.from(files(coverageSourceDirs))
                getSourceDirectories().from(files(coverageSourceDirs))
                getExecutionData().from(files("${project.buildDir}/jacoco/${testTaskName}.exec"))

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}