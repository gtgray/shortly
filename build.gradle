// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.6.10'
    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.19.0"
        classpath "com.google.firebase:firebase-appdistribution-gradle:3.0.1"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

static void generateReleaseNotes(String dir) {
    // discover all tags by date
    def tags = "git tag --list --sort=-committerdate".execute().text.trim().tokenize('\n')
    // collect commit messages between last two tags
    def messages = ""
    if (tags.size() > 1) {
        messages = ("git log --no-merges --pretty=%s " + tags.get(0) + "..." + tags.get(1))
                .execute().text.trim().tokenize('\n')
    }
    // format release notes and write to file
    def releaseNotesDir = new File(dir)
    releaseNotesDir.mkdirs()
    def releaseNotesFile = new File(releaseNotesDir, 'release_notes.txt')
    releaseNotesFile.newWriter().withWriter { writer ->
        int i = 0;
        messages.collect {
            if(it != null) {
                def line = ++i + "\\ " + it + "\n"
                writer << line
            }
        }
    }
    // print release notes file content
    new Scanner(releaseNotesFile).with {
        while (hasNextLine()) {
            println(nextLine())
        }
    }
}